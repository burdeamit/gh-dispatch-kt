name: Release Build

on:
  push:
    tags:
      - '*.*.*'
      - 'SNAPSHOT'

jobs:
  # build_and_release:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'
  #   - name: Grant execute permission for gradlew
  #     run: chmod +x gradlew
  #   - name: Build with Gradle
  #     run: ./gradlew build
  #   - name: Release
  #     uses: softprops/action-gh-release@v1
  #     with:
  #       files: application/build/libs/app.jar
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dispatch:
    # needs: build_and_release
    strategy:
      matrix:
        repository: [burdeamit/gh-dispatch-md]
    runs-on: ubuntu-latest
    steps:
      - name: Extracting Latest Release Version From Github Ref
        run: |
          GITHUB_REF=${{ github.ref }}
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "SPECMATIC_LATEST_RELEASE_VERSION=${GITHUB_REF#refs/tags/}"
          echo "SPECMATIC_LATEST_RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "Extracted Latest Specmatic Release Version ${SPECMATIC_LATEST_RELEASE_VERSION}"
          echo ${{ env.SPECMATIC_LATEST_RELEASE_VERSION }}
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3

        with:
          token: ${{ secrets.UPDATE_TOKEN }}
          repository: ${{ matrix.repository }}
          event-type: specmatic-core-release
          client-payload: '{"latest-release": "$SPECMATIC_LATEST_RELEASE_VERSION"}'

  # check_status:
  #   needs: dispatch
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       repository: [burdeamit/gh-dispatch-md]
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Check workflow status
  #       run: |
  #         check_run_url="https://api.github.com/repos/${{ matrix.repository }}/actions/runs"
  #         conclusion=""
  #         until [[ "$conclusion" == "success" || "$conclusion" == "failure" ]]; do
  #           response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" $check_run_url)
  #           conclusion=$(echo $response | jq -r '.workflow_runs[0].conclusion')
  #           echo "Workflow status: $conclusion"
  #           if [[ "$conclusion" == "null" ]]; then
  #             echo "Workflow is still running. Waiting..."
  #             sleep 60
  #           elif [[ "$conclusion" == "failure" ]]; then
  #             echo "Workflow failed."
  #             exit 1
  #           fi
  #         done